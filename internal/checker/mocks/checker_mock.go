// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
	"url-checker/internal/repository/entity"
)

// CheckerMock is a mock implementation of checker.Checker.
//
//	func TestSomethingThatUsesChecker(t *testing.T) {
//
//		// make and configure a mocked checker.Checker
//		mockedChecker := &CheckerMock{
//			GetStatusFunc: func(ctx context.Context, url string) (entity.Status, error) {
//				panic("mock out the GetStatus method")
//			},
//			SaveToCheckFunc: func(ctx context.Context, urlInfo entity.UrlInfo) error {
//				panic("mock out the SaveToCheck method")
//			},
//		}
//
//		// use mockedChecker in code that requires checker.Checker
//		// and then make assertions.
//
//	}
type CheckerMock struct {
	// GetStatusFunc mocks the GetStatus method.
	GetStatusFunc func(ctx context.Context, url string) (entity.Status, error)

	// SaveToCheckFunc mocks the SaveToCheck method.
	SaveToCheckFunc func(ctx context.Context, urlInfo entity.UrlInfo) error

	// calls tracks calls to the methods.
	calls struct {
		// GetStatus holds details about calls to the GetStatus method.
		GetStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
		// SaveToCheck holds details about calls to the SaveToCheck method.
		SaveToCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UrlInfo is the urlInfo argument value.
			UrlInfo entity.UrlInfo
		}
	}
	lockGetStatus   sync.RWMutex
	lockSaveToCheck sync.RWMutex
}

// GetStatus calls GetStatusFunc.
func (mock *CheckerMock) GetStatus(ctx context.Context, url string) (entity.Status, error) {
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockGetStatus.Lock()
	mock.calls.GetStatus = append(mock.calls.GetStatus, callInfo)
	mock.lockGetStatus.Unlock()
	if mock.GetStatusFunc == nil {
		var (
			statusOut entity.Status
			errOut    error
		)
		return statusOut, errOut
	}
	return mock.GetStatusFunc(ctx, url)
}

// GetStatusCalls gets all the calls that were made to GetStatus.
// Check the length with:
//
//	len(mockedChecker.GetStatusCalls())
func (mock *CheckerMock) GetStatusCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockGetStatus.RLock()
	calls = mock.calls.GetStatus
	mock.lockGetStatus.RUnlock()
	return calls
}

// SaveToCheck calls SaveToCheckFunc.
func (mock *CheckerMock) SaveToCheck(ctx context.Context, urlInfo entity.UrlInfo) error {
	callInfo := struct {
		Ctx     context.Context
		UrlInfo entity.UrlInfo
	}{
		Ctx:     ctx,
		UrlInfo: urlInfo,
	}
	mock.lockSaveToCheck.Lock()
	mock.calls.SaveToCheck = append(mock.calls.SaveToCheck, callInfo)
	mock.lockSaveToCheck.Unlock()
	if mock.SaveToCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.SaveToCheckFunc(ctx, urlInfo)
}

// SaveToCheckCalls gets all the calls that were made to SaveToCheck.
// Check the length with:
//
//	len(mockedChecker.SaveToCheckCalls())
func (mock *CheckerMock) SaveToCheckCalls() []struct {
	Ctx     context.Context
	UrlInfo entity.UrlInfo
} {
	var calls []struct {
		Ctx     context.Context
		UrlInfo entity.UrlInfo
	}
	mock.lockSaveToCheck.RLock()
	calls = mock.calls.SaveToCheck
	mock.lockSaveToCheck.RUnlock()
	return calls
}
